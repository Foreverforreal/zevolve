import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.zhu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10

repositories {
    mavenCentral()
}
ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=production clean build
    environment = System.getProperty("env", "development")
}
configurations {
    implementation.exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-logging')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    runtimeOnly('mysql:mysql-connector-java')
    compileOnly('org.projectlombok:lombok')

    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    implementation('tk.mybatis:mapper-spring-boot-starter:2.0.4')
    implementation('com.github.pagehelper:pagehelper-spring-boot-starter:1.2.7')
    implementation('com.google.guava:guava:26.0-jre')
    implementation('com.alibaba:druid:1.1.11')
    implementation('org.apache.shiro:shiro-spring:1.4.0')
}

def loadConfigGroovy(){
    println "==> Load configuration for '" + environment + "'"
    File config = new File("config.groovy")
    new ConfigSlurper(environment).parse(config.toURI().toURL()).toProperties()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadConfigGroovy())
    }
}
